// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Decoder(in=instruction, type=type, aorm=aorm, comp=comp, dest=dest, jump=jump);
	Mux16(a=instruction, b=outalu, sel=type, out=outmuxa);
	Splitter8(in=dest, a=desta, b=destd, c=destm);
	Not(in=type, out=ntype);
	Or(a=ntype, b=desta, out=loada);
	ARegister(in=outmuxa, load=loada, out=outa);
	Mux16(a=outa, b=inM, sel=aorm, out=outmuxalu);
	Splitter64(in=comp, a=zx, b=nx, c=zy, d=ny, e=f, f=no);
	ALU(x=outd, y=outmuxalu, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no,
	out=outalu, zr=zr, ng=ng);
	And(a=type, b=destd, out=loadd);
	DRegister(in=outalu, load=loadd, out=outd);
	JumpTest(jump=jump, zr=zr, ng=ng, out=outj);
	And(a=type, b=outj, out=dojump);
	Not(in=dojump, out=nojump);
	PC(in=outa, load=dojump, inc=nojump, reset=reset, out=outpc);
	Spread16(in=true, out=allone);
	And16(a=allone, b=outalu, out=outM);
	And(a=type, b=destm, out=dowritem);
	And(a=true, b=dowritem, out=writeM);
	Truncater(in=outa, out=addressM);
	Truncater(in=outpc, out=pc);
}