// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int pow, value;
        let pow = 0;
        let value = 1;
        let n = 16;
        let powersOfTwo = Array.new(n);
        while (pow < n) {
            let powersOfTwo[pow] = value;
            let pow = pow + 1;
            let value = value + value;
        }
        do Screen.setColor(true);
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int location, mod, value, mask;
        let location = 16384 + (y * 32) + (x / 16);
        let mod = x - (x / 16 * 16);
        let value = Memory.peek(location);

        let value = Screen.setBit(value, mod);
        do Memory.poke(location, value);
        return;
    }

    function int setBit(int val, int digit) {
        var int mask, returnValue;

        if (color) {
            let mask = powersOfTwo[digit];
            let returnValue = mask | val;
        } else {
            let mask = ~powersOfTwo[digit];
            let returnValue = mask & val;
        }
        return returnValue;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b;
        var int adyMinusBdx;
        var int mod;
        var int address, value, counter;
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            let b = y1;
            while (~(b = y2)) {
                do Screen.drawPixel(x1, b);
                if (y1 < y2) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
            }
            do Screen.drawPixel(x1, y2);
            return;
        }
        if (dy = 0) {
            if (x1 > x2) {
                do Screen.drawLine(x2, y1, x1, y2);
                return;
            }
            // x1 <= x2
            if (x1 = x2) {
                do Screen.drawPixel(x1, y1);
                return;
            }

            let a = x1 / 16 * 16;
            let b = (x2 + 15) / 16 * 16;
            let b = b + 16;
            let address = 16384 + (y1 * 32) + (a / 16);
            while (~(a = b)) {
                let value = Memory.peek(address);
                let counter = 0;
                while (counter < 16) {
                    if ((~(a < x1)) & (~(a > x2))) {
                        let value = Screen.setBit(value, counter);
                    }
                    let counter = counter + 1;
                    let a = a + 1;
                }
                do Memory.poke(address, value);
                let address = address + 1;
            }

            return;
        }

        if (dx < 0) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        // dx > 0
        let a = 0;
        let b = 0;
        let adyMinusBdx = 0;
        while ((~(a = dx)) & (~(b = dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (dy > 0) {
                if (adyMinusBdx < 0) {
                    let a = a + 1;
                    let adyMinusBdx = adyMinusBdx  + dy;
                } else {
                    let b = b + 1;
                    let adyMinusBdx = adyMinusBdx - dx;
                }
            } else {
                if (adyMinusBdx > 0) {
                    let a = a + 1;
                    let adyMinusBdx = adyMinusBdx + dy;

                } else {
                    let b = b - 1;
                    let adyMinusBdx = adyMinusBdx + dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

        var int currentY;
        let currentY = y1;
        while (~(currentY = y2)) {
            do Screen.drawLine(x1, currentY, x2, currentY);
            if (y1 < y2) {
                let currentY = currentY + 1;
            } else {
                let currentY = currentY - 1;
            }
        }
        do Screen.drawLine(x1, y2, x2, y2);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, squareR;
        let dy = -r;
        let squareR = r * r;

        while (~(dy > r)) {
            do Screen.drawLine(x - Math.sqrt(squareR - (dy * dy)), y + dy,
                x + Math.sqrt(squareR - (dy * dy)), y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
