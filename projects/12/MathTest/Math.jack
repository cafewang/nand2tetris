// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static int lastProduct;

    // Initializes the Math library.
    function void init() {
        var int pow, value;
        let pow = 0;
        let value = 1;
        let n = 16;
        let powersOfTwo = Array.new(n);
        while (pow < n) {
            let powersOfTwo[pow] = value;
            let pow = pow + 1;
            let value = value + value;
        }

        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedX, pow;
        let sum = 0;
        let shiftedX = x;
        let pow = 0;
        while (~(pow = n)) {
            if (~(Math.bit(y, pow) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let pow = pow + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        if (y = 0) {
            do Sys.error(3);
        }
        if (y = powersOfTwo[n-1]) {
            return 0;
        }
        if (x = powersOfTwo[n-1]) {
            if (y > 0) {
                return (-Math.divide(Math.abs(x + y), y)) - 1;
            } else {
                return Math.divide(Math.abs(x - y), Math.abs(y)) + 1;
            }
        }

        if ((x < 0) | (y < 0)) {
            if ((x < 0) & (y < 0)) {
                return Math.divide(Math.abs(x), Math.abs(y));
            } else {
                return -Math.divide(Math.abs(x), Math.abs(y));
            }
        }

        // here x >= 0 and y > 0
        let lastProduct = 0;
        return Math.doDivide(x, y);
    }

    function int doDivide(int x, int y) {
        var int q, yPlusY;
        if (y > x) {
            return 0;
        }

        let yPlusY = y + y;
        if (yPlusY < 0) {
            return 1;
        }

        let q = Math.doDivide(x, yPlusY);
        if (q = 0) {
            if (x < y) {
                return q + q;
            } else {
                return q + q + 1;
            }
        } else {
            if (~((lastProduct + yPlusY) > x)) {
                let lastProduct = lastProduct + yPlusY;
            }
            if ((x - lastProduct) < y) {
                return q + q;
            } else {
                return q + q + 1;
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int result, pow, sum, product;
        let result = 0;
        let pow = n / 2 - 1;
        while (~(pow < 0)) {
            let sum = result + powersOfTwo[pow];
            let product = sum * sum;
            if ((product > 0) & (~(product > x))) {
                let result = sum;
            }
            let pow = pow - 1;
        }
        return result;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        }
        return (~x) + 1;
    }

    /** Returns the pow bit of x */
    function int bit(int x, int pow) {
        return x & (powersOfTwo[pow]);
    }
}
